<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Dashboard</title>
    <link rel="stylesheet" href="/css/studentDashboard.css">
</head>
<body>
    <header>
        <h1>Welcome</h1>
        <a href="/student/logout" class="logout-btn">Logout</a>
    </header>

    <main>
        <!-- Interactive Weekly Schedule -->
        <section class="schedule-section">
            <h2>Your Weekly Schedule</h2>
            <table class="schedule-table">
                <thead>
                    <tr>
                        <th>Time</th>
                        <th>Monday</th>
                        <th>Tuesday</th>
                        <th>Wednesday</th>
                        <th>Thursday</th>
                        <th>Friday</th>
                    </tr>
                </thead>
                <tbody id="schedule-table-body">
                    </tbody>
            </table>
        </section>

        <!-- Course Filtering -->
        <section class="filter-section">
            <h2>Find Courses</h2>
            <div class="filters">
                <select id="department-filter">
                    <option value="">Department</option>
                    <option value="CS">Computer Science</option>
                    <option value="EE">Electrical Engineering</option>
                    <option value="ME">Mechanical Engineering</option>
                </select>

                <select id="level-filter">
                    <option value="">Course Level</option>
                    <option value="100">100</option>
                    <option value="200">200</option>
                    <option value="300">300</option>
                </select>

                <input type="text" id="time-filter" placeholder="Search by Time">
                <button id="search-btn">Search</button>
            </div>

            <section class="course-section">
                <h2>Available Courses</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Course Code</th>
                            <th>Title</th>
                            <th>Department</th>
                            <th>Schedule</th>
                            <th>Seats Available</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="course-table-body">
                        <% if (typeof courses !== "undefined" && courses.length > 0) { %>
                            <% courses.forEach(course => { %>
                                <tr>
                                    <td><%= course.courseCode %></td>
                                    <td><%= course.title %></td>
                                    <td><%= course.department %></td>
                                    <td>
                                        <% course.days.forEach((day, index) => { %>
                                            <%= day %><% if (index < course.days.length - 1) { %>, <% } %>
                                        <% }); %>
                                        (<%= course.startTime %> - <%= course.endTime %>)
                                    </td>
                                    <td><%= course.seatsAvailable %></td>
                                    <td>
                                        <button class="register-btn" data-course-id="<%= course._id %>">
                                            Register
                                        </button>
                                        <button class="drop-btn" data-course-id="<%= course._id %>">
                                            Drop
                                        </button>
                                    </td>
                                </tr>
                            <% }); %>
                        <% } else { %>
                            <tr>
                                <td colspan="6">No courses found</td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </section>
        </section>

        <!-- Course Prerequisites -->
        <section class="prerequisite-section">
            <h2>Course Prerequisites</h2>
            <div id="prerequisite-info">
                <table>
                    <thead>
                        <tr>
                            <th>Course Code</th>
                            <th>Course Title</th>
                            <th>Seats Available</th>
                            <th>Prerequisite Code</th>
                            <th>Prerequisite Title</th>
                            <th>Prerequisite Seats</th>
                        </tr>
                    </thead>
                    <tbody id="prerequisite-table-body">
                        </tbody>
                </table>
            </div>
        </section>
    </main>

    <footer>
        <p>Student Dashboard © 2025</p>
    </footer>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            
            const scheduleBody = document.getElementById("schedule-table-body");
            const timeSlots = [
                "08:00", "09:00", "10:00", "11:00",
                "12:00", "13:00", "14:00", "15:00",
                "16:00", "17:00"
            ];
            const days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"];
        
            timeSlots.forEach(time => {
                const row = document.createElement("tr");
                const timeCell = document.createElement("td");
                timeCell.textContent = time;
                row.appendChild(timeCell);
        
                days.forEach(() => {
                    const cell = document.createElement("td");
                    row.appendChild(cell);
                });
        
                scheduleBody.appendChild(row);
            });
        
            async function populateSchedule() {
                try {
                    const rollNumber = "3681";
                    const response = await fetch(`/student/schedule/${rollNumber}`);
        
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
        
                    const scheduleData = await response.json();
        
                    scheduleData.forEach(entry => {
                        const rowIndex = timeSlots.indexOf(entry.time);
                        const colIndex = days.indexOf(entry.day) + 1; // +1 to skip the time column
        
                        if (rowIndex !== -1 && colIndex !== 0) {
                            const row = scheduleBody.rows[rowIndex];
                            row.cells[colIndex].textContent = entry.courseTitle;
                        }
                    });
                } catch (error) {
                    console.error("Error fetching or populating schedule:", error);
                }
            }
        
            populateSchedule(); 
        
        
        
        
            // ✅ Register Button Event Listener
            document.querySelectorAll(".register-btn").forEach(button => {
                button.addEventListener("click", async function () {
                    const courseId = this.getAttribute("data-course-id");
                    const rollNumber = "3681"; // Replace this with the actual student's roll number
        
                    const response = await fetch("/student/register", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ courseId, rollNumber }), // Send rollNumber instead
                    });
        
                    const data = await response.json();
                    if (data.success) {
                        alert("✅ Successfully registered!");
                        location.reload();
                    } else {
                        alert("❌ Registration failed: " + data.message);
                    }
                });
            });
            document.querySelectorAll(".drop-btn").forEach(button => {
                button.addEventListener("click", async function () {
                    const courseId = this.getAttribute("data-course-id");
                    const rollNumber = "3681"; 
                    const response = await fetch("/student/drop", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ courseId, rollNumber }),
                    });
        
                    alert("Are you sure you want to drop this course?");
                    const data = await response.json();
                    if (data.success) {
                        alert("✅ Successfully dropped the course!");
                        location.reload();
                    } else {
                        alert("❌ Drop failed: " + data.message);
                    } 
                });
            });
            // ✅ Course Filtering Logic
            document.getElementById("search-btn").addEventListener("click", function () {
                const department = document.getElementById("department-filter").value;
                const level = document.getElementById("level-filter").value;
                const time = document.getElementById("time-filter").value.toLowerCase();
        
                const rows = document.querySelectorAll("#course-table-body tr");
        
                rows.forEach(row => {
                    const cells = row.getElementsByTagName("td");
        
                    if (cells.length === 6) {  // Adjusted for the updated table structure
                        const courseDepartment = cells[2].textContent.trim();
                        const courseTime = cells[3].textContent.trim().toLowerCase();
        
                        const matchesDepartment = !department || courseDepartment === department;
                        const matchesLevel = !level || cells[1].textContent.trim() === level;
                        const matchesTime = !time || courseTime.includes(time);
        
                        row.style.display = (matchesDepartment && matchesLevel && matchesTime) ? "" : "none";
                    }
                });
            });
        });
        
        
        async function populatePrerequisites() {
                try {
                    const rollNumber = "3681"; // Replace with actual student roll number
                    const response = await fetch(`/student/prerequisites/${rollNumber}`);
        
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
        
                    const prerequisitesData = await response.json();
                    const prerequisiteTableBody = document.getElementById("prerequisite-table-body");
        
                    prerequisitesData.forEach(course => {
                        if (course.prerequisites.length === 0) {
                            prerequisiteTableBody.innerHTML += `
                                <tr>
                                    <td>${course.courseCode}</td>
                                    <td>${course.title}</td>
                                    <td>${course.seatsAvailable}</td>
                                    <td>No Prerequisites</td>
                                    <td>No Prerequisites</td>
                                    <td>No Prerequisites</td>
                                </tr>
                            `;
                        } else {
                            course.prerequisites.forEach(prereq => {
                                prerequisiteTableBody.innerHTML += `
                                    <tr>
                                        <td>${course.courseCode}</td>
                                        <td>${course.title}</td>
                                        <td>${course.seatsAvailable}</td>
                                        <td>${prereq.courseCode}</td>
                                        <td>${prereq.title}</td>
                                        <td>${prereq.seatsAvailable}</td>
                                    </tr>
                                `;
                            });
                        }
                    });
                } catch (error) {
                    console.error("Error fetching or populating prerequisites:", error);
                }
            }
        
            populatePrerequisites();

    </script>
    
    
</body>
</html>
